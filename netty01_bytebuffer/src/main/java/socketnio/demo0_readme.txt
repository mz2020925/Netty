本包中，编写了
阻塞 单线程模式，服务端处理情况。说明：
    * 单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持。

非阻 塞单线程模式，服务端处理情况。说明：
    * 但非阻塞模式下，即使没有连接建立，没有可读数据，线程仍然在不断运行但不干活，白白浪费了cpu
    * 数据复制过程中，线程实际还是阻塞的（**AIO 改进的地方**）

selector单线程模式，服务端处理情况。说明：
    * 一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程才去处理。避免非阻塞模式下所做无用功
    * 让这个线程能够被充分利用
    * 节约了线程的数量
    * 减少了线程上下文切换
    *** 适合连接数特别多，但流量低的场景（low traffic）


其实还应该有多线程模式：（注意阻塞，非阻塞是针对一个线程（调用者）来说的）
阻塞 多线程：一个线程对应一个socket。
    * 内存占用高
    * 线程上下文切换成本高
    *** 只适合连接数少的场景

阻塞 线程池：一个线程池对应多个socket。
    * 减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程
    * 阻塞模式下，线程仅能处理一个 socket 连接。一个线程还是处理一个socket，只不过线程全部交给线程池管理
    *** 仅适合短连接场景

非阻塞 多线程：
    * 问题依然会落在非阻塞单线程问题上，就会出现，多个线程不断运行但不干活

非阻塞 线程池：
    * 问题依然会落在非阻塞单线程问题上，就会出现，多个线程不断运行但不干活。线程池应该没有办法让不断运行的线程去干其他事情。




